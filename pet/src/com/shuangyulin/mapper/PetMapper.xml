<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.shuangyulin.mapper.PetMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加宠物记录 -->
	<insert id="addPet" parameterType="pet">
		insert into t_pet(petClassObj,petName,petPhoto,petDesc,petRequest,petState,addTime) values 
		(#{petClassObj.petClassId},#{petName},#{petPhoto},#{petDesc},#{petRequest},#{petState},#{addTime})
	</insert>

	<!-- 按照查询条件分页查询宠物记录 -->
	<select id="queryPet" resultMap="petMap" >
		select t_pet.* from t_pet,t_petClass ${where} and t_pet.petClassObj = t_petClass.petClassId limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="petMap" type="pet">
        <id property="petId" column="petId" />
        <association property="petClassObj" column="petClassObj" select="com.shuangyulin.mapper.PetClassMapper.getPetClass" />
    </resultMap>

    <!-- 按照查询条件查询所有宠物记录 -->
	<select id="queryPetList" resultMap="petMap" >
		select t_pet.* from t_pet,t_petClass ${where} and t_pet.petClassObj = t_petClass.petClassId
	</select>

    <!-- 按照查询条件的宠物记录数 -->
	<select id="queryPetCount" resultType="int">
		select count(*) from t_pet,t_petClass ${where} and t_pet.petClassObj = t_petClass.petClassId
	</select>

	<!-- 根据主键查询某个宠物记录 -->
	<select id="getPet" parameterType="int" resultMap="petMap">
		select * from t_pet where t_pet.petId = #{petId}
	</select>

	<!-- 更新宠物记录 -->
	<update id="updatePet" parameterType="pet">
		update t_pet set petClassObj=#{petClassObj.petClassId},petName=#{petName},petPhoto=#{petPhoto},petDesc=#{petDesc},petRequest=#{petRequest},petState=#{petState},addTime=#{addTime} where petId = #{petId}
	</update>

	<!-- 删除宠物记录 -->
	<delete id="deletePet" parameterType="int">
		delete from t_pet where petId=#{petId}
	</delete>

</mapper>
